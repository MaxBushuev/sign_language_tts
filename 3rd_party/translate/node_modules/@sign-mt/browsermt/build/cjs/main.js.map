{
  "version": 3,
  "sources": ["../../src/main.ts"],
  "sourcesContent": ["// import * as Comlink from \"https://unpkg.com/comlink/dist/esm/comlink.mjs\";\n\nimport { createBergamotWorker, ModelRegistry } from \"./index\";\n\nconst statusEl: HTMLElement = document.querySelector(\"#status\")!;\nconst displayStatus = (status: string) => (statusEl.innerText = status);\n\nconst langFromEl: HTMLSelectElement = document.querySelector(\"#lang-from\")!;\nconst langToEl: HTMLSelectElement = document.querySelector(\"#lang-to\")!;\n\nconst inputEl: HTMLInputElement = document.querySelector(\"#input\")!;\nconst outputEl: HTMLInputElement = document.querySelector(\"#output\")!;\nconst swapButtonEl: HTMLButtonElement = document.querySelector(\".swap\")!;\n\nfunction _prepareTranslateOptions(paragraphs: string[]) {\n  // Each option object can be different for each entry. But to keep the test page simple,\n  // we just keep all the options same (specifically avoiding parsing the input to determine\n  // html/non-html text)\n  return new Array(paragraphs.length).fill({\n    isQualityScores: true,\n    isHtml: true,\n  });\n}\n\nfunction textToHTML(text: string): string {\n  const div = document.createElement(\"div\");\n  div.appendChild(document.createTextNode(text));\n  return div.innerHTML;\n}\n\nasync function main() {\n  const comlinkWorker = createBergamotWorker(\"../../build/bundled/worker.js\");\n\n  await comlinkWorker.importBergamotWorker(\n    \"../../../artifacts/bergamot-translator-worker.js\",\n    \"../../../artifacts/bergamot-translator-worker.wasm\"\n  );\n\n  const MODEL_REGISTRY = \"../../example/src/models/registry.json\";\n  const response = await fetch(MODEL_REGISTRY);\n  const modelRegistry: ModelRegistry = await response.json();\n  // Model Registry only has names, not paths. So we need to add the path to each entry.\n  for (const [name, model] of Object.entries(modelRegistry)) {\n    for (const file of Object.values(model)) {\n      file.name = `../../example/src/models/${name}/${file.name}`;\n    }\n  }\n\n  // await comlinkWorker.loadModel(\"en\", \"bg\", modelRegistry);\n  // await comlinkWorker.translate(\n  //   \"en\",\n  //   \"bg\",\n  //   [\"my test sentence\"],\n  //   [\n  //     {\n  //       isQualityScores: true,\n  //       isHtml: false,\n  //     },\n  //   ]\n  // );\n\n  const translateCall = async () => {\n    const text = inputEl.value;\n    if (!text.trim().length) return;\n\n    const paragraphs = text.split(/\\n+/).map(textToHTML); // escape HTML\n    const translateOptions = _prepareTranslateOptions(paragraphs);\n    const lngFrom = langFromEl.value;\n    const lngTo = langToEl.value;\n\n    const results: any[] = await comlinkWorker.translate(\n      lngFrom,\n      lngTo,\n      paragraphs,\n      translateOptions\n    );\n    outputEl.innerHTML = \"\"; // Clear output of previous translation\n\n    // Add each translation in its own div to have a known root in which the\n    // sentence ids are unique. Used for highlighting sentences.\n    for (const translatedHTML of results) {\n      const translation = document.createElement(\"div\");\n      translation.classList.add(\"translation\");\n      translation.innerHTML = translatedHTML;\n      addQualityClasses(translation);\n      outputEl.appendChild(translation);\n    }\n  };\n\n  const addQualityClasses = (root: HTMLElement) => {\n    // You can do this wit CSS variables, calc() and min/max, but JS is just easier\n\n    root.querySelectorAll(\"[x-bergamot-sentence-score]\").forEach((el) => {\n      // The threshold is ln(0.5) (https://github.com/browsermt/bergamot-translator/pull/370#issuecomment-1058123399)\n      const score = el.getAttribute(\"x-bergamot-sentence-score\") ?? \"\";\n      el.classList.toggle(\"bad\", parseFloat(score) < -0.6931);\n    });\n\n    root.querySelectorAll(\"[x-bergamot-word-score]\").forEach((el) => {\n      // The threshold is ln(0.5) (https://github.com/browsermt/bergamot-translator/pull/370#issuecomment-1058123399)\n      const score = el.getAttribute(\"x-bergamot-word-score\") ?? \"\";\n      el.classList.toggle(\"bad\", parseFloat(score) < -0.6931);\n    });\n\n    // Add tooltips to each (sub)word with sentence and word score.\n    root\n      .querySelectorAll(\"[x-bergamot-sentence-score] > [x-bergamot-word-score]\")\n      .forEach((el) => {\n        const parent = el.parentNode as HTMLElement;\n        const sentenceScore = parseFloat(\n          parent.getAttribute(\"x-bergamot-sentence-score\") ?? \"\"\n        );\n        const wordScore = parseFloat(\n          el.getAttribute(\"x-bergamot-word-score\") ?? \"\"\n        );\n        el.setAttribute(\n          \"title\",\n          `Sentence: ${sentenceScore}  Word: ${wordScore}`\n        );\n      });\n  };\n\n  const loadModel = async () => {\n    const lngFrom = langFromEl.value;\n    const lngTo = langToEl.value;\n    if (lngFrom !== lngTo) {\n      displayStatus(`Installing model...`);\n      console.log(`Loading model '${lngFrom}${lngTo}'`);\n      displayStatus(\n        await comlinkWorker.loadModel(lngFrom, lngTo, modelRegistry)\n      );\n      await translateCall();\n    } else {\n      outputEl.innerHTML = textToHTML(inputEl.value);\n    }\n  };\n\n  langFromEl.addEventListener(\"change\", loadModel);\n  langToEl.addEventListener(\"change\", loadModel);\n\n  swapButtonEl.addEventListener(\"click\", async () => {\n    [langFromEl.value, langToEl.value] = [langToEl.value, langFromEl.value];\n    inputEl.value = outputEl.innerText;\n    await loadModel();\n  });\n\n  outputEl.addEventListener(\"mouseover\", (e) => {\n    const target = e.target as HTMLElement;\n    const parent = target.parentNode as HTMLElement;\n    const root = target.closest(\".translation\");\n    const sentence = parent.hasAttribute(\"x-bergamot-sentence-index\")\n      ? parent.getAttribute(\"x-bergamot-sentence-index\")\n      : null;\n    document\n      .querySelectorAll(\"#output font[x-bergamot-sentence-index]\")\n      .forEach((el) => {\n        el.classList.toggle(\n          \"highlight-sentence\",\n          el.getAttribute(\"x-bergamot-sentence-index\") === sentence &&\n            el.closest(\".translation\") === root\n        );\n      });\n  });\n\n  async function init() {\n    const langs: string[] = Array.from(\n      new Set(\n        Object.keys(modelRegistry).reduce((acc, key) => {\n          const middle = Math.round(key.length / 2);\n          // @ts-expect-error\n          return acc.concat([\n            key.substring(0, middle),\n            key.substring(middle, key.length),\n          ]);\n        }, [])\n      )\n    );\n    const langNames = new Intl.DisplayNames(undefined, { type: \"language\" });\n    const langName = (lang: string) => langNames.of(lang) ?? lang;\n\n    // Sort languages by display name\n    langs.sort((a, b) => langName(a).localeCompare(langName(b)));\n\n    // Populate the dropdowns\n    langs.forEach((code) => {\n      const name = langName(code);\n      langFromEl.innerHTML += `<option value=\"${code}\">${name}</option>`;\n      langToEl.innerHTML += `<option value=\"${code}\">${name}</option>`;\n    });\n\n    langFromEl.value = \"spoken\";\n    langToEl.value = \"signed\";\n    // // try to guess input language from user agent\n    // let myLang = \"navigator\" in globalThis ? navigator.language : \"\";\n    // if (myLang) {\n    //   myLang = myLang.split(\"-\")[0];\n    //   if (langs.includes(myLang)) {\n    //     console.log(\"guessing input language is\", myLang);\n    //     langFromEl.value = myLang;\n    //   }\n    // }\n    //\n    // // find first output lang that *isn't* input language\n    // langToEl.value = langs.find((code) => code !== langFromEl.value)!;\n\n    // load this model\n    await loadModel();\n  }\n\n  inputEl.addEventListener(\"keyup\", translateCall);\n\n  return init();\n}\n\nmain()\n  .then(() => {\n    console.log(\"ready\");\n  })\n  .catch((err) => console.error(err));\n"],
  "mappings": "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",
  "names": []
}
