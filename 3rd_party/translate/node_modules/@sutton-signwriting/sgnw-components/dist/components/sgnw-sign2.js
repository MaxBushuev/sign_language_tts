/*!
 * The Sutton SignWriting Web Components
 */
import { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';
import { s as swu } from './swu2.js';
import { s as style } from './style.js';
import { s as swu$1 } from './swu.js';
import { c as cssValues } from './global.js';

const sgnwSignCss = ":host{direction:ltr}";

const SgnwSign = /*@__PURE__*/ proxyCustomElement(class extends HTMLElement {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.sgnw = window.sgnw;
  }
  connectedCallback() {
    if (!this.sign) {
      let sign = swu.parse.sign(this.el.innerHTML);
      if (sign.style) {
        this.styling = style.compose(style.merge(style.parse(sign.style), style.parse(this.styling)));
      }
      sign.style = "";
      this.sign = swu.compose.sign(sign);
    }
    if (!this.sgnw) {
      let self = this;
      function handleSgnw() {
        self.sgnw = window.sgnw;
        window.removeEventListener("sgnw", handleSgnw, false);
      }
      window.addEventListener('sgnw', handleSgnw, false);
    }
  }
  render() {
    const styleStr = style.compose(style.merge(cssValues(this.el), style.parse(this.styling)));
    return (h(Host, { sign: this.sign, styling: this.styling, innerHTML: this.sgnw ? swu$1.signSvg(this.sign + (styleStr)) : '' }, h("slot", null)));
  }
  get el() { return this; }
  static get style() { return sgnwSignCss; }
}, [1, "sgnw-sign", {
    "sign": [1537],
    "styling": [1537],
    "sgnw": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["sgnw-sign"];
  components.forEach(tagName => { switch (tagName) {
    case "sgnw-sign":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, SgnwSign);
      }
      break;
  } });
}

export { SgnwSign as S, defineCustomElement as d };
