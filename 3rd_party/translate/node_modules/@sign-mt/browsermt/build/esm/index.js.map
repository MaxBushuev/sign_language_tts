{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import * as comlink from \"comlink\";\n\ninterface ModelInfoPiece {\n  estimatedCompressedSize: number;\n  expectedSha256Hash: string;\n  modelType: string;\n  name: string;\n  size: number;\n}\n\ninterface ModelInfo {\n  model: ModelInfoPiece;\n  vocab: ModelInfoPiece;\n  lex: ModelInfoPiece;\n  qualityModel: ModelInfoPiece;\n}\n\nexport type ModelRegistry = Record<string, ModelInfo>;\n\n// Information corresponding to each file type\ntype FileType = \"model\" | \"lex\" | \"vocab\" | \"qualityModel\";\n\nexport interface FileInfo {\n  type: FileType;\n  alignment: number;\n}\n\nexport interface TranslationOptions {\n  isHtml?: boolean;\n  isQualityScores?: boolean;\n}\n\nexport interface TranslationResponse {\n  text: string;\n}\n\ninterface WorkerInterface {\n  importBergamotWorker: (\n    jsFilePath: string,\n    wasmFilePath: string | Buffer\n  ) => Promise<void>;\n  loadModel: (\n    from: string,\n    to: string,\n    modelRegistry: ModelRegistry\n  ) => Promise<string>;\n  translate: (\n    from: string,\n    to: string,\n    sentences: string[],\n    options: TranslationOptions[]\n  ) => Promise<TranslationResponse[]>;\n  terminate: () => Promise<void>;\n}\n\nexport type ComlinkWorkerInterface = comlink.Remote<WorkerInterface>;\n\nexport function createBergamotWorker(path: string): ComlinkWorkerInterface {\n  const workerClass =\n    \"Worker\" in globalThis ? globalThis.Worker : require(\"web-worker\");\n  const worker: Worker = new workerClass(path);\n  const abortionError = new Promise((resolve, reject) => {\n    worker.addEventListener(\"error\", reject);\n    worker.addEventListener(\"close\", resolve);\n  });\n\n  return new Proxy(comlink.wrap(worker), {\n    get(target, prop, receiver) {\n      if (prop === \"terminate\") {\n        return () => {\n          worker.terminate();\n        };\n      }\n      const targetProp = Reflect.get(target, prop, receiver);\n      if (typeof targetProp === \"function\") {\n        return (...args: any[]) => {\n          // If for any reason the worker terminates unexpectedly, reject the promise\n          return Promise.race([targetProp(...args), abortionError]);\n        };\n      }\n      return targetProp;\n    },\n  });\n}\n"],
  "mappings": "AAAA,YAAY,aAAa;AAyDlB,SAAS,qBAAqB,MAAsC;AACzE,QAAM,cACJ,YAAY,aAAa,WAAW,SAAS,QAAQ,YAAY;AACnE,QAAM,SAAiB,IAAI,YAAY,IAAI;AAC3C,QAAM,gBAAgB,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrD,WAAO,iBAAiB,SAAS,MAAM;AACvC,WAAO,iBAAiB,SAAS,OAAO;AAAA,EAC1C,CAAC;AAED,SAAO,IAAI,MAAM,QAAQ,KAAK,MAAM,GAAG;AAAA,IACrC,IAAI,QAAQ,MAAM,UAAU;AAC1B,UAAI,SAAS,aAAa;AACxB,eAAO,MAAM;AACX,iBAAO,UAAU;AAAA,QACnB;AAAA,MACF;AACA,YAAM,aAAa,QAAQ,IAAI,QAAQ,MAAM,QAAQ;AACrD,UAAI,OAAO,eAAe,YAAY;AACpC,eAAO,IAAI,SAAgB;AAEzB,iBAAO,QAAQ,KAAK,CAAC,WAAW,GAAG,IAAI,GAAG,aAAa,CAAC;AAAA,QAC1D;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AACH;",
  "names": []
}
