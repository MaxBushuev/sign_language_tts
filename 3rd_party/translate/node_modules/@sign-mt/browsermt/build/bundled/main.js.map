{
  "version": 3,
  "sources": ["../../node_modules/comlink/src/comlink.ts", "../../node_modules/web-worker/cjs/node.js", "../../src/index.ts", "../../src/main.ts"],
  "sourcesContent": ["/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously \u00AF\\_(\u30C4)_/\u00AF\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn\u2019t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n", "/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst URL = require('url');\n\nconst VM = require('vm');\n\nconst threads = require('worker_threads');\n\nconst WORKER = Symbol.for('worker');\nconst EVENTS = Symbol.for('events');\n\nclass EventTarget {\n  constructor() {\n    Object.defineProperty(this, EVENTS, {\n      value: new Map()\n    });\n  }\n\n  dispatchEvent(event) {\n    event.target = event.currentTarget = this;\n\n    if (this['on' + event.type]) {\n      try {\n        this['on' + event.type](event);\n      } catch (err) {\n        console.error(err);\n      }\n    }\n\n    const list = this[EVENTS].get(event.type);\n    if (list == null) return;\n    list.forEach(handler => {\n      try {\n        handler.call(this, event);\n      } catch (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  addEventListener(type, fn) {\n    let events = this[EVENTS].get(type);\n    if (!events) this[EVENTS].set(type, events = []);\n    events.push(fn);\n  }\n\n  removeEventListener(type, fn) {\n    let events = this[EVENTS].get(type);\n\n    if (events) {\n      const index = events.indexOf(fn);\n      if (index !== -1) events.splice(index, 1);\n    }\n  }\n\n}\n\nfunction Event(type, target) {\n  this.type = type;\n  this.timeStamp = Date.now();\n  this.target = this.currentTarget = this.data = null;\n} // this module is used self-referentially on both sides of the\n// thread boundary, but behaves differently in each context.\n\n\nmodule.exports = threads.isMainThread ? mainThread() : workerThread();\nconst baseUrl = URL.pathToFileURL(process.cwd() + '/');\n\nfunction mainThread() {\n  /**\n   * A web-compatible Worker implementation atop Node's worker_threads.\n   *  - uses DOM-style events (Event.data, Event.type, etc)\n   *  - supports event handler properties (worker.onmessage)\n   *  - Worker() constructor accepts a module URL\n   *  - accepts the {type:'module'} option\n   *  - emulates WorkerGlobalScope within the worker\n   * @param {string} url  The URL or module specifier to load\n   * @param {object} [options]  Worker construction options\n   * @param {string} [options.name]  Available as `self.name` within the Worker\n   * @param {string} [options.type=\"classic\"]  Pass \"module\" to create a Module Worker.\n   */\n  class Worker extends EventTarget {\n    constructor(url, options) {\n      super();\n      const {\n        name,\n        type\n      } = options || {};\n      url += '';\n      let mod;\n\n      if (/^data:/.test(url)) {\n        mod = url;\n      } else {\n        mod = URL.fileURLToPath(new URL.URL(url, baseUrl));\n      }\n\n      const worker = new threads.Worker(__filename, {\n        workerData: {\n          mod,\n          name,\n          type\n        }\n      });\n      Object.defineProperty(this, WORKER, {\n        value: worker\n      });\n      worker.on('message', data => {\n        const event = new Event('message');\n        event.data = data;\n        this.dispatchEvent(event);\n      });\n      worker.on('error', error => {\n        error.type = 'error';\n        this.dispatchEvent(error);\n      });\n      worker.on('exit', () => {\n        this.dispatchEvent(new Event('close'));\n      });\n    }\n\n    postMessage(data, transferList) {\n      this[WORKER].postMessage(data, transferList);\n    }\n\n    terminate() {\n      this[WORKER].terminate();\n    }\n\n  }\n\n  Worker.prototype.onmessage = Worker.prototype.onerror = Worker.prototype.onclose = null;\n  return Worker;\n}\n\nfunction workerThread() {\n  let {\n    mod,\n    name,\n    type\n  } = threads.workerData; // turn global into a mock WorkerGlobalScope\n\n  const self = global.self = global; // enqueue messages to dispatch after modules are loaded\n\n  let q = [];\n\n  function flush() {\n    const buffered = q;\n    q = null;\n    buffered.forEach(event => {\n      self.dispatchEvent(event);\n    });\n  }\n\n  threads.parentPort.on('message', data => {\n    const event = new Event('message');\n    event.data = data;\n    if (q == null) self.dispatchEvent(event);else q.push(event);\n  });\n  threads.parentPort.on('error', err => {\n    err.type = 'Error';\n    self.dispatchEvent(err);\n  });\n\n  class WorkerGlobalScope extends EventTarget {\n    postMessage(data, transferList) {\n      threads.parentPort.postMessage(data, transferList);\n    } // Emulates https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close\n\n\n    close() {\n      process.exit();\n    }\n\n  }\n\n  let proto = Object.getPrototypeOf(global);\n  delete proto.constructor;\n  Object.defineProperties(WorkerGlobalScope.prototype, proto);\n  proto = Object.setPrototypeOf(global, new WorkerGlobalScope());\n  ['postMessage', 'addEventListener', 'removeEventListener', 'dispatchEvent'].forEach(fn => {\n    proto[fn] = proto[fn].bind(global);\n  });\n  global.name = name;\n  const isDataUrl = /^data:/.test(mod);\n\n  if (type === 'module') {\n    import(mod).catch(err => {\n      if (isDataUrl && err.message === 'Not supported') {\n        console.warn('Worker(): Importing data: URLs requires Node 12.10+. Falling back to classic worker.');\n        return evaluateDataUrl(mod, name);\n      }\n\n      console.error(err);\n    }).then(flush);\n  } else {\n    try {\n      if (/^data:/.test(mod)) {\n        evaluateDataUrl(mod, name);\n      } else {\n        require(mod);\n      }\n    } catch (err) {\n      console.error(err);\n    }\n\n    Promise.resolve().then(flush);\n  }\n}\n\nfunction evaluateDataUrl(url, name) {\n  const {\n    data\n  } = parseDataUrl(url);\n  return VM.runInThisContext(data, {\n    filename: 'worker.<' + (name || 'data:') + '>'\n  });\n}\n\nfunction parseDataUrl(url) {\n  let [m, type, encoding, data] = url.match(/^data: *([^;,]*)(?: *; *([^,]*))? *,(.*)$/) || [];\n  if (!m) throw Error('Invalid Data URL.');\n  if (encoding) switch (encoding.toLowerCase()) {\n    case 'base64':\n      data = Buffer.from(data, 'base64').toString();\n      break;\n\n    default:\n      throw Error('Unknown Data URL encoding \"' + encoding + '\"');\n  }\n  return {\n    type,\n    data\n  };\n}", "import * as comlink from \"comlink\";\n\ninterface ModelInfoPiece {\n  estimatedCompressedSize: number;\n  expectedSha256Hash: string;\n  modelType: string;\n  name: string;\n  size: number;\n}\n\ninterface ModelInfo {\n  model: ModelInfoPiece;\n  vocab: ModelInfoPiece;\n  lex: ModelInfoPiece;\n  qualityModel: ModelInfoPiece;\n}\n\nexport type ModelRegistry = Record<string, ModelInfo>;\n\n// Information corresponding to each file type\ntype FileType = \"model\" | \"lex\" | \"vocab\" | \"qualityModel\";\n\nexport interface FileInfo {\n  type: FileType;\n  alignment: number;\n}\n\nexport interface TranslationOptions {\n  isHtml?: boolean;\n  isQualityScores?: boolean;\n}\n\nexport interface TranslationResponse {\n  text: string;\n}\n\ninterface WorkerInterface {\n  importBergamotWorker: (\n    jsFilePath: string,\n    wasmFilePath: string | Buffer\n  ) => Promise<void>;\n  loadModel: (\n    from: string,\n    to: string,\n    modelRegistry: ModelRegistry\n  ) => Promise<string>;\n  translate: (\n    from: string,\n    to: string,\n    sentences: string[],\n    options: TranslationOptions[]\n  ) => Promise<TranslationResponse[]>;\n  terminate: () => Promise<void>;\n}\n\nexport type ComlinkWorkerInterface = comlink.Remote<WorkerInterface>;\n\nexport function createBergamotWorker(path: string): ComlinkWorkerInterface {\n  const workerClass =\n    \"Worker\" in globalThis ? globalThis.Worker : require(\"web-worker\");\n  const worker: Worker = new workerClass(path);\n  const abortionError = new Promise((resolve, reject) => {\n    worker.addEventListener(\"error\", reject);\n    worker.addEventListener(\"close\", resolve);\n  });\n\n  return new Proxy(comlink.wrap(worker), {\n    get(target, prop, receiver) {\n      if (prop === \"terminate\") {\n        return () => {\n          worker.terminate();\n        };\n      }\n      const targetProp = Reflect.get(target, prop, receiver);\n      if (typeof targetProp === \"function\") {\n        return (...args: any[]) => {\n          // If for any reason the worker terminates unexpectedly, reject the promise\n          return Promise.race([targetProp(...args), abortionError]);\n        };\n      }\n      return targetProp;\n    },\n  });\n}\n", "// import * as Comlink from \"https://unpkg.com/comlink/dist/esm/comlink.mjs\";\n\nimport { createBergamotWorker, ModelRegistry } from \"./index\";\n\nconst statusEl: HTMLElement = document.querySelector(\"#status\")!;\nconst displayStatus = (status: string) => (statusEl.innerText = status);\n\nconst langFromEl: HTMLSelectElement = document.querySelector(\"#lang-from\")!;\nconst langToEl: HTMLSelectElement = document.querySelector(\"#lang-to\")!;\n\nconst inputEl: HTMLInputElement = document.querySelector(\"#input\")!;\nconst outputEl: HTMLInputElement = document.querySelector(\"#output\")!;\nconst swapButtonEl: HTMLButtonElement = document.querySelector(\".swap\")!;\n\nfunction _prepareTranslateOptions(paragraphs: string[]) {\n  // Each option object can be different for each entry. But to keep the test page simple,\n  // we just keep all the options same (specifically avoiding parsing the input to determine\n  // html/non-html text)\n  return new Array(paragraphs.length).fill({\n    isQualityScores: true,\n    isHtml: true,\n  });\n}\n\nfunction textToHTML(text: string): string {\n  const div = document.createElement(\"div\");\n  div.appendChild(document.createTextNode(text));\n  return div.innerHTML;\n}\n\nasync function main() {\n  const comlinkWorker = createBergamotWorker(\"../../build/bundled/worker.js\");\n\n  await comlinkWorker.importBergamotWorker(\n    \"../../../artifacts/bergamot-translator-worker.js\",\n    \"../../../artifacts/bergamot-translator-worker.wasm\"\n  );\n\n  const MODEL_REGISTRY = \"../../example/src/models/registry.json\";\n  const response = await fetch(MODEL_REGISTRY);\n  const modelRegistry: ModelRegistry = await response.json();\n  // Model Registry only has names, not paths. So we need to add the path to each entry.\n  for (const [name, model] of Object.entries(modelRegistry)) {\n    for (const file of Object.values(model)) {\n      file.name = `../../example/src/models/${name}/${file.name}`;\n    }\n  }\n\n  // await comlinkWorker.loadModel(\"en\", \"bg\", modelRegistry);\n  // await comlinkWorker.translate(\n  //   \"en\",\n  //   \"bg\",\n  //   [\"my test sentence\"],\n  //   [\n  //     {\n  //       isQualityScores: true,\n  //       isHtml: false,\n  //     },\n  //   ]\n  // );\n\n  const translateCall = async () => {\n    const text = inputEl.value;\n    if (!text.trim().length) return;\n\n    const paragraphs = text.split(/\\n+/).map(textToHTML); // escape HTML\n    const translateOptions = _prepareTranslateOptions(paragraphs);\n    const lngFrom = langFromEl.value;\n    const lngTo = langToEl.value;\n\n    const results: any[] = await comlinkWorker.translate(\n      lngFrom,\n      lngTo,\n      paragraphs,\n      translateOptions\n    );\n    outputEl.innerHTML = \"\"; // Clear output of previous translation\n\n    // Add each translation in its own div to have a known root in which the\n    // sentence ids are unique. Used for highlighting sentences.\n    for (const translatedHTML of results) {\n      const translation = document.createElement(\"div\");\n      translation.classList.add(\"translation\");\n      translation.innerHTML = translatedHTML;\n      addQualityClasses(translation);\n      outputEl.appendChild(translation);\n    }\n  };\n\n  const addQualityClasses = (root: HTMLElement) => {\n    // You can do this wit CSS variables, calc() and min/max, but JS is just easier\n\n    root.querySelectorAll(\"[x-bergamot-sentence-score]\").forEach((el) => {\n      // The threshold is ln(0.5) (https://github.com/browsermt/bergamot-translator/pull/370#issuecomment-1058123399)\n      const score = el.getAttribute(\"x-bergamot-sentence-score\") ?? \"\";\n      el.classList.toggle(\"bad\", parseFloat(score) < -0.6931);\n    });\n\n    root.querySelectorAll(\"[x-bergamot-word-score]\").forEach((el) => {\n      // The threshold is ln(0.5) (https://github.com/browsermt/bergamot-translator/pull/370#issuecomment-1058123399)\n      const score = el.getAttribute(\"x-bergamot-word-score\") ?? \"\";\n      el.classList.toggle(\"bad\", parseFloat(score) < -0.6931);\n    });\n\n    // Add tooltips to each (sub)word with sentence and word score.\n    root\n      .querySelectorAll(\"[x-bergamot-sentence-score] > [x-bergamot-word-score]\")\n      .forEach((el) => {\n        const parent = el.parentNode as HTMLElement;\n        const sentenceScore = parseFloat(\n          parent.getAttribute(\"x-bergamot-sentence-score\") ?? \"\"\n        );\n        const wordScore = parseFloat(\n          el.getAttribute(\"x-bergamot-word-score\") ?? \"\"\n        );\n        el.setAttribute(\n          \"title\",\n          `Sentence: ${sentenceScore}  Word: ${wordScore}`\n        );\n      });\n  };\n\n  const loadModel = async () => {\n    const lngFrom = langFromEl.value;\n    const lngTo = langToEl.value;\n    if (lngFrom !== lngTo) {\n      displayStatus(`Installing model...`);\n      console.log(`Loading model '${lngFrom}${lngTo}'`);\n      displayStatus(\n        await comlinkWorker.loadModel(lngFrom, lngTo, modelRegistry)\n      );\n      await translateCall();\n    } else {\n      outputEl.innerHTML = textToHTML(inputEl.value);\n    }\n  };\n\n  langFromEl.addEventListener(\"change\", loadModel);\n  langToEl.addEventListener(\"change\", loadModel);\n\n  swapButtonEl.addEventListener(\"click\", async () => {\n    [langFromEl.value, langToEl.value] = [langToEl.value, langFromEl.value];\n    inputEl.value = outputEl.innerText;\n    await loadModel();\n  });\n\n  outputEl.addEventListener(\"mouseover\", (e) => {\n    const target = e.target as HTMLElement;\n    const parent = target.parentNode as HTMLElement;\n    const root = target.closest(\".translation\");\n    const sentence = parent.hasAttribute(\"x-bergamot-sentence-index\")\n      ? parent.getAttribute(\"x-bergamot-sentence-index\")\n      : null;\n    document\n      .querySelectorAll(\"#output font[x-bergamot-sentence-index]\")\n      .forEach((el) => {\n        el.classList.toggle(\n          \"highlight-sentence\",\n          el.getAttribute(\"x-bergamot-sentence-index\") === sentence &&\n            el.closest(\".translation\") === root\n        );\n      });\n  });\n\n  async function init() {\n    const langs: string[] = Array.from(\n      new Set(\n        Object.keys(modelRegistry).reduce((acc, key) => {\n          const middle = Math.round(key.length / 2);\n          // @ts-expect-error\n          return acc.concat([\n            key.substring(0, middle),\n            key.substring(middle, key.length),\n          ]);\n        }, [])\n      )\n    );\n    const langNames = new Intl.DisplayNames(undefined, { type: \"language\" });\n    const langName = (lang: string) => langNames.of(lang) ?? lang;\n\n    // Sort languages by display name\n    langs.sort((a, b) => langName(a).localeCompare(langName(b)));\n\n    // Populate the dropdowns\n    langs.forEach((code) => {\n      const name = langName(code);\n      langFromEl.innerHTML += `<option value=\"${code}\">${name}</option>`;\n      langToEl.innerHTML += `<option value=\"${code}\">${name}</option>`;\n    });\n\n    langFromEl.value = \"spoken\";\n    langToEl.value = \"signed\";\n    // // try to guess input language from user agent\n    // let myLang = \"navigator\" in globalThis ? navigator.language : \"\";\n    // if (myLang) {\n    //   myLang = myLang.split(\"-\")[0];\n    //   if (langs.includes(myLang)) {\n    //     console.log(\"guessing input language is\", myLang);\n    //     langFromEl.value = myLang;\n    //   }\n    // }\n    //\n    // // find first output lang that *isn't* input language\n    // langToEl.value = langs.find((code) => code !== langFromEl.value)!;\n\n    // load this model\n    await loadModel();\n  }\n\n  inputEl.addEventListener(\"keyup\", translateCall);\n\n  return init();\n}\n\nmain()\n  .then(() => {\n    console.log(\"ready\");\n  })\n  .catch((err) => console.error(err));\n"],
  "mappings": "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",
  "names": ["wrap", "obj", "returnValue", "proxy", "self"]
}
