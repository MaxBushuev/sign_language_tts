/// <reference types="node" />
import * as comlink from "comlink";
interface ModelInfoPiece {
    estimatedCompressedSize: number;
    expectedSha256Hash: string;
    modelType: string;
    name: string;
    size: number;
}
interface ModelInfo {
    model: ModelInfoPiece;
    vocab: ModelInfoPiece;
    lex: ModelInfoPiece;
    qualityModel: ModelInfoPiece;
}
export declare type ModelRegistry = Record<string, ModelInfo>;
declare type FileType = "model" | "lex" | "vocab" | "qualityModel";
export interface FileInfo {
    type: FileType;
    alignment: number;
}
export interface TranslationOptions {
    isHtml?: boolean;
    isQualityScores?: boolean;
}
export interface TranslationResponse {
    text: string;
}
interface WorkerInterface {
    importBergamotWorker: (jsFilePath: string, wasmFilePath: string | Buffer) => Promise<void>;
    loadModel: (from: string, to: string, modelRegistry: ModelRegistry) => Promise<string>;
    translate: (from: string, to: string, sentences: string[], options: TranslationOptions[]) => Promise<TranslationResponse[]>;
    terminate: () => Promise<void>;
}
export declare type ComlinkWorkerInterface = comlink.Remote<WorkerInterface>;
export declare function createBergamotWorker(path: string): ComlinkWorkerInterface;
export {};
