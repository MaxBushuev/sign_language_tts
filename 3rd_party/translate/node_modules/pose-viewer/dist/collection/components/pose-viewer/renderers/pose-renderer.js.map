{"version":3,"file":"pose-renderer.js","sourceRoot":"","sources":["../../../../src/components/pose-viewer/renderers/pose-renderer.tsx"],"names":[],"mappings":"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","sourcesContent":["import {PoseViewer} from \"../pose-viewer\";\nimport {PoseBodyFrameModel, PoseLimb, PosePointModel, RGBColor} from \"pose-format\";\n\nexport abstract class PoseRenderer {\n\n  constructor(protected viewer: PoseViewer) {\n  }\n\n  x(v: number) {\n    const n = v * (this.viewer.elWidth - 2 * this.viewer.elPadding.width);\n    return n / this.viewer.pose.header.width + this.viewer.elPadding.width;\n  }\n\n  y(v: number) {\n    const n = v * (this.viewer.elHeight - 2 * this.viewer.elPadding.height);\n    return n / this.viewer.pose.header.height + this.viewer.elPadding.height;\n  }\n\n  isJointValid(joint: PosePointModel) {\n    return joint.C > 0;\n  }\n\n  abstract renderJoint(i: number, joint: PosePointModel, color: RGBColor);\n\n  renderJoints(joints: PosePointModel[], colors: RGBColor[]) {\n    return joints\n      .filter(this.isJointValid.bind(this))\n      .map((joint, i) => {\n        return this.renderJoint(i, joint, colors[i % colors.length]);\n      });\n  }\n\n  abstract renderLimb(from: PosePointModel, to: PosePointModel, color: RGBColor);\n\n  renderLimbs(limbs: PoseLimb[], joints: PosePointModel[], colors: RGBColor[]) {\n    /**\n     This implementation is a bit different from the python one.\n     In python, we sort all limbs of all people and all components by depth and then render them.\n     Here, we only sort the limbs of the current component by depth.\n     */\n\n    const lines = limbs.map(({from, to}) => {\n      const a = joints[from];\n      const b = joints[to];\n      if (!this.isJointValid(a) || !this.isJointValid(b)) {\n        return null;\n      }\n\n      const c1 = colors[from % colors.length];\n      const c2 = colors[to % colors.length];\n      const color = {\n        R: (c1.R + c2.R) / 2,\n        G: (c1.G + c2.G) / 2,\n        B: (c1.B + c2.B) / 2,\n      };\n\n      return {from: a, to: b, color, z: (a.Z + b.Z) / 2};\n    });\n\n    return lines\n      .filter(Boolean) // Remove invalid lines\n      .sort((a, b) => b.z - a.z) // Sort lines by depth\n      .map(({from, to, color}) => this.renderLimb(from, to, color));\n  }\n\n  renderFrame(frame: PoseBodyFrameModel) {\n    return frame.people.map(person => this.viewer.pose.header.components.map(component => {\n      const joints = person[component.name];\n      return [\n        this.renderJoints(joints, component.colors),\n        this.renderLimbs(component.limbs, joints, component.colors),\n      ]\n    }))\n  }\n\n  abstract render(frame: PoseBodyFrameModel);\n}\n"]}